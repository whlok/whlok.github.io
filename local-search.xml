<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>A* 算法</title>
    <link href="/2023/10/24/A-%E7%AE%97%E6%B3%95/"/>
    <url>/2023/10/24/A-%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>A*算法是一种常用于图形搜索和路径规划的启发式搜索算法。它通过综合考虑实际代价和估计代价，来寻找从起点到目标节点的最优路径。</p><p>算法步骤：</p><ol><li>创建两个空列表：Open列表和Closed列表。</li><li>将起点添加到Open列表。</li><li>重复以下步骤，直到找到目标节点或Open列表为空： a. 从Open列表中选择估计代价最小的节点，将其移动到Closed列表。 b. 遍历该节点的相邻节点：<ul><li>如果相邻节点已经在Closed列表中，跳过它。</li><li>如果相邻节点不在Open列表中，计算其实际代价（从起点到当前节点的代价）和估计代价（从当前节点到目标节点的估计代价），并将其添加到Open列表。</li><li>如果相邻节点已经在Open列表中，检查经过当前节点到达该相邻节点的路径是否更优，如果更优，则更新其实际代价和父节点。</li></ul></li><li>如果Open列表为空，表示没有找到目标节点，搜索失败；否则，从目标节点开始，沿着父节点指针一直回溯到起点，即可得到最优路径。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>    <span class="hljs-type">int</span> g; <span class="hljs-comment">// Actual cost from start node to this node</span><br>    <span class="hljs-type">int</span> h; <span class="hljs-comment">// Heuristic cost from this node to the goal node</span><br>    <span class="hljs-type">int</span> f; <span class="hljs-comment">// f = g + h</span><br>    Node parent;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>        <span class="hljs-built_in">this</span>.g = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">this</span>.h = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">this</span>.f = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">this</span>.parent = <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AStarAlgorithm</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[][] grid; <span class="hljs-comment">// 2D array representing the map/grid</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> rows;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> cols;<br>    <span class="hljs-keyword">private</span> Node startNode;<br>    <span class="hljs-keyword">private</span> Node goalNode;<br>    <span class="hljs-keyword">private</span> List&lt;Node&gt; openList;<br>    <span class="hljs-keyword">private</span> List&lt;Node&gt; closedList;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AStarAlgorithm</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] grid, <span class="hljs-type">int</span> startX, <span class="hljs-type">int</span> startY, <span class="hljs-type">int</span> goalX, <span class="hljs-type">int</span> goalY)</span> &#123;<br>        <span class="hljs-built_in">this</span>.grid = grid;<br>        <span class="hljs-built_in">this</span>.rows = grid.length;<br>        <span class="hljs-built_in">this</span>.cols = grid[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-built_in">this</span>.startNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(startX, startY);<br>        <span class="hljs-built_in">this</span>.goalNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(goalX, goalY);<br>        <span class="hljs-built_in">this</span>.openList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-built_in">this</span>.closedList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;Node&gt; <span class="hljs-title function_">findPath</span><span class="hljs-params">()</span> &#123;<br>        openList.add(startNode);<br><br>        <span class="hljs-keyword">while</span> (!openList.isEmpty()) &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> findLowestFInOpenList();<br>            openList.remove(current);<br>            closedList.add(current);<br><br>            <span class="hljs-keyword">if</span> (current.x == goalNode.x &amp;&amp; current.y == goalNode.y) &#123;<br>                <span class="hljs-keyword">return</span> reconstructPath(current);<br>            &#125;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">1</span>; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">1</span>; j++) &#123;<br>                    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; j == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// Skip current node</span><br><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">neighborX</span> <span class="hljs-operator">=</span> current.x + i;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">neighborY</span> <span class="hljs-operator">=</span> current.y + j;<br><br>                    <span class="hljs-keyword">if</span> (neighborX &gt;= <span class="hljs-number">0</span> &amp;&amp; neighborX &lt; rows &amp;&amp; neighborY &gt;= <span class="hljs-number">0</span> &amp;&amp; neighborY &lt; cols) &#123;<br>                        <span class="hljs-keyword">if</span> (grid[neighborX][neighborY] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// Skip obstacles</span><br><br>                        <span class="hljs-type">Node</span> <span class="hljs-variable">neighbor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(neighborX, neighborY);<br>                        <span class="hljs-keyword">if</span> (closedList.contains(neighbor)) <span class="hljs-keyword">continue</span>;<br><br>                        <span class="hljs-type">int</span> <span class="hljs-variable">tentativeG</span> <span class="hljs-operator">=</span> current.g + <span class="hljs-number">1</span>; <span class="hljs-comment">// Assuming each move has a cost of 1 (can be modified for different costs)</span><br><br>                        <span class="hljs-keyword">if</span> (!openList.contains(neighbor) || tentativeG &lt; neighbor.g) &#123;<br>                            neighbor.parent = current;<br>                            neighbor.g = tentativeG;<br>                            neighbor.h = calculateHeuristic(neighbor);<br>                            neighbor.f = neighbor.g + neighbor.h;<br><br>                            <span class="hljs-keyword">if</span> (!openList.contains(neighbor)) &#123;<br>                                openList.add(neighbor);<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// Path not found</span><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">findLowestFInOpenList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> openList.stream().min(Comparator.comparingInt(node -&gt; node.f)).orElse(<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculateHeuristic</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-comment">// Here, we can use any heuristic function (e.g., Manhattan distance, Euclidean distance, etc.)</span><br>        <span class="hljs-keyword">return</span> Math.abs(node.x - goalNode.x) + Math.abs(node.y - goalNode.y);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> List&lt;Node&gt; <span class="hljs-title function_">reconstructPath</span><span class="hljs-params">(Node current)</span> &#123;<br>        List&lt;Node&gt; path = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">null</span>) &#123;<br>            path.add(<span class="hljs-number">0</span>, current);<br>            current = current.parent;<br>        &#125;<br>        <span class="hljs-keyword">return</span> path;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[][] grid = &#123;<br>            &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;,<br>            &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;,<br>            &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;,<br>            &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;<br>        &#125;;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">startX</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">startY</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">goalX</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">goalY</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><br>        <span class="hljs-type">AStarAlgorithm</span> <span class="hljs-variable">aStar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AStarAlgorithm</span>(grid, startX, startY, goalX, goalY);<br>        List&lt;Node&gt; path = aStar.findPath();<br><br>        <span class="hljs-keyword">if</span> (path != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">for</span> (Node node : path) &#123;<br>                System.out.println(<span class="hljs-string">&quot;(&quot;</span> + node.x + <span class="hljs-string">&quot;, &quot;</span> + node.y + <span class="hljs-string">&quot;)&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;Path not found!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo+github搭建个人博客</title>
    <link href="/2023/10/24/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/10/24/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>install node.js</p><p>install git</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><h2 id="流程搭建"><a href="#流程搭建" class="headerlink" title="流程搭建"></a>流程搭建</h2><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>新建一个文件夹，存放博客文件，如取名为&#x2F;blog</p><p>在&#x2F;blog文件夹下安装hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i hexo-cli -g<br></code></pre></td></tr></table></figure><p>验证hexo是否安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo -v<br></code></pre></td></tr></table></figure><p>初始化文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init<br></code></pre></td></tr></table></figure><p>安装必备组件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm installs<br></code></pre></td></tr></table></figure><p>生成静态网页</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br></code></pre></td></tr></table></figure><h3 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo s<br></code></pre></td></tr></table></figure><h3 id="github远程部署"><a href="#github远程部署" class="headerlink" title="github远程部署"></a>github远程部署</h3><p>新建一个远程仓库</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/username/u</span>sername.github.io.git<br></code></pre></td></tr></table></figure><p>配置&#x2F;blog下的_config.yaml中</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> https:<span class="hljs-comment">//github.com/username/username.github.io.git</span><br><span class="hljs-symbol">  branch:</span> main<br></code></pre></td></tr></table></figure><p>远程部署</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><h3 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h3><p>在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p><p>为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong>， 后者称为 <strong>主题配置文件</strong>。</p><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 <code>themes</code> 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。</p><p>在终端窗口下，定位到 Hexo 站点目录下。使用 <code>Git</code> checkout 代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> your-hexo-site</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></code></pre></td></tr></table></figure><p>启用主题</p><p>与所有 Hexo 主题启用的模式一样。 当 克隆&#x2F;下载 完成后，打开 <strong>站点配置文件</strong>， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code>。</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">theme:</span> <span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure><p>验证主题</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d -g</span><br></code></pre></td></tr></table></figure><p>配置主题配置文件</p><h2 id="多端部署"><a href="#多端部署" class="headerlink" title="多端部署"></a>多端部署</h2><h3 id="原理简介"><a href="#原理简介" class="headerlink" title="原理简介"></a>原理简介</h3><h3 id="流程实现"><a href="#流程实现" class="headerlink" title="流程实现"></a>流程实现</h3><p>新建一个branch并设置为默认分支,比如新分支叫hexo</p><p>克隆github仓库到本地，将原来的博客根目录下的文件拷贝过来（除.deploy_git, node_modules&#x2F;, public&#x2F;），</p><p>确认.gitignore内容</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.DS_Store</span><br>Thumbs<span class="hljs-number">.</span><span class="hljs-built_in">db</span><br><span class="hljs-built_in">db</span><span class="hljs-number">.</span>json<br>*.log<br>node_modules/<br><span class="hljs-meta">public</span>/<br><span class="hljs-meta">.deploy</span>*/<br></code></pre></td></tr></table></figure><p>push源文件到远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add .<br>git commit -m &quot;add branch&quot;<br>git push<br></code></pre></td></tr></table></figure><p>在当前文件夹安装hexo，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br>hexo -v ## 验证下是否安装成功<br>npm install<br></code></pre></td></tr></table></figure><h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><ul><li>npm install -g hexo-cli 异常</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stata">$ npm install -<span class="hljs-keyword">g</span> hexo-<span class="hljs-keyword">cli</span><br>npm <span class="hljs-keyword">ERR</span>! code EEXIST<br>npm <span class="hljs-keyword">ERR</span>! path C:\Users\Administrator\AppData\Roaming\npm\hexo.ps1<br>npm <span class="hljs-keyword">ERR</span>! EEXIST: <span class="hljs-keyword">file</span> already exists<br>npm <span class="hljs-keyword">ERR</span>! <span class="hljs-keyword">File</span> exists: C:\Users\Administrator\AppData\Roaming\npm\hexo.ps1<br>npm <span class="hljs-keyword">ERR</span>! Remove the existing <span class="hljs-keyword">file</span> and try again, or <span class="hljs-keyword">run</span> npm<br>npm <span class="hljs-keyword">ERR</span>! with --force to overwrite files recklessly.<br><br>npm <span class="hljs-keyword">ERR</span>! A complete <span class="hljs-keyword">log</span> of this <span class="hljs-keyword">run</span> can be found <span class="hljs-keyword">in</span>:<br>npm <span class="hljs-keyword">ERR</span>!     C:\Users\Administrator\AppData\<span class="hljs-keyword">Local</span>\npm-cache\_logs\2023-10-24T05_13_02_159Z-debug-0.<span class="hljs-keyword">log</span><br></code></pre></td></tr></table></figure><p>这是由于之前可能装过hexo，需要在npm的appdata中删除原有的hexo modules</p><ul><li>hexo主题切换导致乱码</li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">&#123;% extends <span class="hljs-string">&#x27;_layout.swig&#x27;</span> %&#125; &#123;% <span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;_macro/post.swig&#x27;</span> as post_template %&#125;<span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>..<br></code></pre></td></tr></table></figure><p>hexo在5.0之后把swig给删除了需要自己手动安装</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i hexo-renderer-swig<br></code></pre></td></tr></table></figure><p>重新生成</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean          <br>hexo <span class="hljs-keyword">generate</span>      <br>hexo server<br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">github+hexo搭建个人博客</a></p><p><a href="https://www.cnblogs.com/lanhualan/p/14588669.html">hexo主题切换乱码问题解决</a></p><p><a href="https://fluid-dev.github.io/hexo-fluid-docs/start/#%E5%88%9B%E5%BB%BA%E3%80%8C%E5%85%B3%E4%BA%8E%E9%A1%B5%E3%80%8D">fluid主题配置</a></p><p><a href="https://dora-cmon.github.io/posts/454ba26/">hexo跨平台搭建</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
